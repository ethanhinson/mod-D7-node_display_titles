<?php
/**
 * @file
 * Primary hook implementations for Title Override.
 */

/**
 * Implements hook_menu()
 */
function node_display_titles_menu() {
  $items['admin/config/search/node-display-titles'] = array(
    'title' => t('Node Display Titles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_display_titles_config'),
    'access arguments' => array('administer node display titles'),
    'file' => 'node_display_titles.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function node_display_titles_permission() {
  $permissions['administer node display titles'] = array(
    'title' => t('Administer node display titles.'),
    'description' => t('Override node titles.'),
  );
  return $permissions;
}

/**
 * Implements hook_preprocess_page().
 */
function node_display_titles_preprocess_page(&$vars) {
  if(array_key_exists('node', $vars)) {
    if (!$vars['node']->node_display_titles_processed) {
      // If we haven't already applied node_display_title patterns
      // in the display suite hook, process title now.
      node_display_titles_generate_title($vars['node']);
    }
  }
}

/**
 * @param $fields
 * @param $entity_type
 *
 * Implements hook_ds_fields_info_alter. Set custom function to render title
 * with our node title pattern.
 */
function node_display_titles_ds_fields_info_alter(&$field, $entity_type) {
  if ($entity_type == 'node') {
    $field['title']['function'] = 'node_display_titles_render_title';
  }
}

/**
 * @param $field
 * @return mixed
 *
 * Render display suite title using our custom node title pattern.
 */
function node_display_titles_render_title($field) {
  if (isset($field['entity']->nid)) {
    // Only process title field if this is a node page.
    $node = menu_get_object();
    if ($node->nid == $field['entity']->nid) {
      // Generate a custom title for this node.
      $title = node_display_titles_generate_title($field['entity']);
      if ($title) {
        // If there was a pattern set for this node, use custom title.
        $field['entity']->title = $title;
      }

      // Flag this node as already processed so we don't process again in
      // hook_preprocess_page.
      $field['entity']->node_display_titles_processed = true;
    }
  }

  if (function_exists('ds_render_field')) {
    // Render field with ds_render_field to make sure wrappers, classes, and
    // other formatting are added.
    return ds_render_field($field);
  } else {
    // If ds_render_field funtion doesn't exist, just return unformatted title.
    return $field['entity']->title;
  }
}

/**
 * @param $node
 * @return mixed
 *
 * Generate a new title if there is a custom pattern set.
 */
function node_display_titles_generate_title($node) {
  $pattern = variable_get($node->type . '_title_pattern', FALSE);
  if($pattern) {
    $options = array(
      'callback' => variable_get('node_display_titles_sanitization_callback', 'node_display_titles_token_sanitize'),
      'clear' => variable_get('node_display_titles_clear_tokens', TRUE),
    );

    $title = token_replace($pattern, array('node' => $node), $options);

    drupal_set_title($title, PASS_THROUGH);

    return $title;
  }
}

/**
 * Default sanitization callback for tokenized H1s
 */

function node_display_titles_token_sanitize(&$tokens) {
  foreach($tokens as $k => $v) {
    $tokens[$k] = strip_tags($v);
  }
}